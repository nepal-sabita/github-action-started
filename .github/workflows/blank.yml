# This is a basic workflow to help you get started with Actions

name: Getting Started

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: /github-action-started/setup.sh

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo 1. what is in the directory?
          ls -a
          echo 2. Is git installed?
          git --version
          # echo
          # echo 4. Which build installed?
          # gradle --version
          # if [["$(ruby --version)"!= *"2.7.7"*]];
          # then
          # echo "Ruby version is not found. Installing...."
          # rbenv install 2.7.7
          # rbenv global 2.7.7
          # else
          # echo "ruby version 2.7.7 is already installed"
          # fi
          # ruby --version
          # if ! gem list -i "^rails$" > /dev/null 2>&1; then
          #   echo "Rails not found. Installing..."
          #   export GEM_HOME=$HOME/gems
          #   export PATH=$GEM_HOME/bin:$PATH
          #   gem install rails
          # else
          #   echo "Rails is already installed."
          # fi
          # # Verify Rails installation
          # rails --version
          # if ! command -v flutter > /dev/null 2>&1;
          # then
          # echo "flutter not found. Installing ...."
          # git clone https://github.com/flutter/flutter.git -b stable --depth 1
          # export PATH="$PATH:`pwd`/flutter/bin"
          # flutter --version
          # flutter precache
          # else
          # echo "flutter is already installed"
          # fi
          
          # flutter --version
          # dart --version
          # if ! command -v dart > /dev/null 2>&1;
          # then
          # echo "dart not found. Installing ..."
          # mkdir -p $HOME/dart
          #   curl -fsSL https://dart.dev/get/dart.zip -o dart.zip
          #   unzip dart.zip -d $HOME/dart
          #   export PATH="$PATH:$HOME/dart/dart-sdk/bin"
          #   else
          #   echo "dart is already installed"
          #   fi
          #   dart --version
          # echo 5. Where is Android SDK Root
          # echo $ANDROID_SDK_ROOT
          # echo
          # echo 6. What is the workspace Location
          # echo $RUNNER_WORKSPACE
          # echo
          # echo 7. Who is running the script
          # whoami
          # echo 8. How is the disc laid out
          # df
          # echo 9. What environment variables are available
          # env
          
          
          
          
          
